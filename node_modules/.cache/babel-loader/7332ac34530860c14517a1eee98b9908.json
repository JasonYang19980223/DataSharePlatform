{"ast":null,"code":"\"use strict\";\n\nvar _pathToRegexp = _interopRequireDefault(require(\"path-to-regexp\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _url = require(\"url\");\n\nvar _link = _interopRequireDefault(require(\"next/link\"));\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = function (opts) {\n  return new Routes(opts);\n};\n\nvar Routes =\n/*#__PURE__*/\nfunction () {\n  function Routes() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$Link = _ref.Link,\n        Link = _ref$Link === void 0 ? _link.default : _ref$Link,\n        _ref$Router = _ref.Router,\n        Router = _ref$Router === void 0 ? _router.default : _ref$Router;\n\n    _classCallCheck(this, Routes);\n\n    this.routes = [];\n    this.Link = this.getLink(Link);\n    this.Router = this.getRouter(Router);\n  }\n\n  _createClass(Routes, [{\n    key: \"add\",\n    value: function add(name, pattern, page) {\n      var options;\n\n      if (name instanceof Object) {\n        options = name;\n        name = options.name;\n      } else {\n        if (name[0] === '/') {\n          page = pattern;\n          pattern = name;\n          name = null;\n        }\n\n        options = {\n          name: name,\n          pattern: pattern,\n          page: page\n        };\n      }\n\n      if (this.findByName(name)) {\n        throw new Error(\"Route \\\"\".concat(name, \"\\\" already exists\"));\n      }\n\n      this.routes.push(new Route(options));\n      return this;\n    }\n  }, {\n    key: \"findByName\",\n    value: function findByName(name) {\n      if (name) {\n        return this.routes.filter(function (route) {\n          return route.name === name;\n        })[0];\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(url) {\n      var parsedUrl = (0, _url.parse)(url, true);\n      var pathname = parsedUrl.pathname,\n          query = parsedUrl.query;\n      return this.routes.reduce(function (result, route) {\n        if (result.route) return result;\n        var params = route.match(pathname);\n        if (!params) return result;\n        return _objectSpread({}, result, {\n          route: route,\n          params: params,\n          query: _objectSpread({}, query, params)\n        });\n      }, {\n        query: query,\n        parsedUrl: parsedUrl\n      });\n    }\n  }, {\n    key: \"findAndGetUrls\",\n    value: function findAndGetUrls(nameOrUrl, params) {\n      var route = this.findByName(nameOrUrl);\n\n      if (route) {\n        return {\n          route: route,\n          urls: route.getUrls(params),\n          byName: true\n        };\n      } else {\n        var _this$match = this.match(nameOrUrl),\n            _route = _this$match.route,\n            query = _this$match.query;\n\n        var href = _route ? _route.getHref(query) : nameOrUrl;\n        var urls = {\n          href: href,\n          as: nameOrUrl\n        };\n        return {\n          route: _route,\n          urls: urls\n        };\n      }\n    }\n  }, {\n    key: \"getRequestHandler\",\n    value: function getRequestHandler(app, customHandler) {\n      var _this = this;\n\n      var nextHandler = app.getRequestHandler();\n      return function (req, res) {\n        var _this$match2 = _this.match(req.url),\n            route = _this$match2.route,\n            query = _this$match2.query,\n            parsedUrl = _this$match2.parsedUrl;\n\n        if (route) {\n          if (customHandler) {\n            customHandler({\n              req: req,\n              res: res,\n              route: route,\n              query: query\n            });\n          } else {\n            app.render(req, res, route.page, query);\n          }\n        } else {\n          nextHandler(req, res, parsedUrl);\n        }\n      };\n    }\n  }, {\n    key: \"getLink\",\n    value: function getLink(Link) {\n      var _this2 = this;\n\n      var LinkRoutes = function LinkRoutes(props) {\n        var route = props.route,\n            params = props.params,\n            to = props.to,\n            newProps = _objectWithoutProperties(props, [\"route\", \"params\", \"to\"]);\n\n        var nameOrUrl = route || to;\n\n        if (nameOrUrl) {\n          Object.assign(newProps, _this2.findAndGetUrls(nameOrUrl, params).urls);\n        }\n\n        return _react.default.createElement(Link, newProps);\n      };\n\n      return LinkRoutes;\n    }\n  }, {\n    key: \"getRouter\",\n    value: function getRouter(Router) {\n      var _this3 = this;\n\n      var wrap = function wrap(method) {\n        return function (route, params, options) {\n          var _this3$findAndGetUrls = _this3.findAndGetUrls(route, params),\n              byName = _this3$findAndGetUrls.byName,\n              _this3$findAndGetUrls2 = _this3$findAndGetUrls.urls,\n              as = _this3$findAndGetUrls2.as,\n              href = _this3$findAndGetUrls2.href;\n\n          return Router[method](href, as, byName ? options : params);\n        };\n      };\n\n      Router.pushRoute = wrap('push');\n      Router.replaceRoute = wrap('replace');\n      Router.prefetchRoute = wrap('prefetch');\n      return Router;\n    }\n  }]);\n\n  return Routes;\n}();\n\nvar Route =\n/*#__PURE__*/\nfunction () {\n  function Route(_ref2) {\n    var name = _ref2.name,\n        pattern = _ref2.pattern,\n        _ref2$page = _ref2.page,\n        page = _ref2$page === void 0 ? name : _ref2$page;\n\n    _classCallCheck(this, Route);\n\n    if (!name && !page) {\n      throw new Error(\"Missing page to render for route \\\"\".concat(pattern, \"\\\"\"));\n    }\n\n    this.name = name;\n    this.pattern = pattern || \"/\".concat(name);\n    this.page = page.replace(/(^|\\/)index$/, '').replace(/^\\/?/, '/');\n    this.regex = (0, _pathToRegexp.default)(this.pattern, this.keys = []);\n    this.keyNames = this.keys.map(function (key) {\n      return key.name;\n    });\n    this.toPath = _pathToRegexp.default.compile(this.pattern);\n  }\n\n  _createClass(Route, [{\n    key: \"match\",\n    value: function match(path) {\n      var values = this.regex.exec(path);\n\n      if (values) {\n        return this.valuesToParams(values.slice(1));\n      }\n    }\n  }, {\n    key: \"valuesToParams\",\n    value: function valuesToParams(values) {\n      var _this4 = this;\n\n      return values.reduce(function (params, val, i) {\n        if (val === undefined) return params;\n        return Object.assign(params, _defineProperty({}, _this4.keys[i].name, decodeURIComponent(val)));\n      }, {});\n    }\n  }, {\n    key: \"getHref\",\n    value: function getHref() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return \"\".concat(this.page, \"?\").concat(toQuerystring(params));\n    }\n  }, {\n    key: \"getAs\",\n    value: function getAs() {\n      var _this5 = this;\n\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var as = this.toPath(params) || '/';\n      var keys = Object.keys(params);\n      var qsKeys = keys.filter(function (key) {\n        return _this5.keyNames.indexOf(key) === -1;\n      });\n      if (!qsKeys.length) return as;\n      var qsParams = qsKeys.reduce(function (qs, key) {\n        return Object.assign(qs, _defineProperty({}, key, params[key]));\n      }, {});\n      return \"\".concat(as, \"?\").concat(toQuerystring(qsParams));\n    }\n  }, {\n    key: \"getUrls\",\n    value: function getUrls(params) {\n      var as = this.getAs(params);\n      var href = this.getHref(params);\n      return {\n        as: as,\n        href: href\n      };\n    }\n  }]);\n\n  return Route;\n}();\n\nvar toQuerystring = function toQuerystring(obj) {\n  return Object.keys(obj).filter(function (key) {\n    return obj[key] !== null && obj[key] !== undefined;\n  }).map(function (key) {\n    var value = obj[key];\n\n    if (Array.isArray(value)) {\n      value = value.join('/');\n    }\n\n    return [encodeURIComponent(key), encodeURIComponent(value)].join('=');\n  }).join('&');\n};","map":null,"metadata":{},"sourceType":"script"}