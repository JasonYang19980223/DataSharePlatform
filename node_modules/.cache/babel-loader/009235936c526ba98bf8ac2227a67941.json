{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _set = require('babel-runtime/core-js/set');\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _url2 = require('url');\n\nvar _EventEmitter = require('../EventEmitter');\n\nvar _EventEmitter2 = _interopRequireDefault(_EventEmitter);\n\nvar _shallowEquals = require('../shallow-equals');\n\nvar _shallowEquals2 = _interopRequireDefault(_shallowEquals);\n\nvar _pQueue = require('../p-queue');\n\nvar _pQueue2 = _interopRequireDefault(_pQueue);\n\nvar _utils = require('../utils');\n\nvar _ = require('./');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* global __NEXT_DATA__ */\n\n\nvar Router = function () {\n  function Router(pathname, query, as) {\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        pageLoader = _ref.pageLoader,\n        Component = _ref.Component,\n        ErrorComponent = _ref.ErrorComponent,\n        err = _ref.err;\n\n    (0, _classCallCheck3.default)(this, Router); // represents the current component key\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (Component !== ErrorComponent) {\n      this.components[this.route] = {\n        Component: Component,\n        err: err\n      };\n    } // Handling Router Events\n\n\n    this.events = new _EventEmitter2.default();\n    this.pageLoader = pageLoader;\n    this.prefetchQueue = new _pQueue2.default({\n      concurrency: 2\n    });\n    this.ErrorComponent = ErrorComponent;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.subscriptions = new _set2.default();\n    this.componentLoadCancel = null;\n    this.onPopState = this.onPopState.bind(this);\n\n    if (typeof window !== 'undefined') {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', (0, _url2.format)({\n        pathname: pathname,\n        query: query\n      }), (0, _utils.getURL)());\n      window.addEventListener('popstate', this.onPopState);\n    }\n  }\n\n  (0, _createClass3.default)(Router, [{\n    key: 'onPopState',\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee(e) {\n        var pathname, query, _e$state, url, as, options;\n\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (e.state) {\n                  _context.next = 4;\n                  break;\n                } // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n\n\n                pathname = this.pathname, query = this.query;\n                this.changeState('replaceState', (0, _url2.format)({\n                  pathname: pathname,\n                  query: query\n                }), (0, _utils.getURL)());\n                return _context.abrupt('return');\n\n              case 4:\n                _e$state = e.state, url = _e$state.url, as = _e$state.as, options = _e$state.options;\n                this.replace(url, as, options);\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onPopState(_x2) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return onPopState;\n    }()\n  }, {\n    key: 'update',\n    value: function update(route, Component) {\n      var data = this.components[route];\n\n      if (!data) {\n        throw new Error('Cannot update unavailable route: ' + route);\n      }\n\n      var newData = (0, _extends3.default)({}, data, {\n        Component: Component\n      });\n      this.components[route] = newData;\n\n      if (route === this.route) {\n        this.notify(newData);\n      }\n    }\n  }, {\n    key: 'reload',\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee2(route) {\n        var pathname, query, url, routeInfo, error;\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                delete this.components[route];\n                this.pageLoader.clearCache(route);\n\n                if (!(route !== this.route)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt('return');\n\n              case 4:\n                pathname = this.pathname, query = this.query;\n                url = window.location.href;\n                this.events.emit('routeChangeStart', url);\n                _context2.next = 9;\n                return this.getRouteInfo(route, pathname, query, url);\n\n              case 9:\n                routeInfo = _context2.sent;\n                error = routeInfo.error;\n\n                if (!(error && error.cancelled)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                return _context2.abrupt('return');\n\n              case 13:\n                this.notify(routeInfo);\n\n                if (!error) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                this.events.emit('routeChangeError', error, url);\n                throw error;\n\n              case 17:\n                this.events.emit('routeChangeComplete', url);\n\n              case 18:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function reload(_x3) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return reload;\n    }()\n  }, {\n    key: 'back',\n    value: function back() {\n      window.history.back();\n    }\n  }, {\n    key: 'push',\n    value: function push(url) {\n      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.change('pushState', url, as, options);\n    }\n  }, {\n    key: 'replace',\n    value: function replace(url) {\n      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.change('replaceState', url, as, options);\n    }\n  }, {\n    key: 'change',\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee3(method, _url, _as, options) {\n        var url, as, _parse, pathname, query, route, _options$shallow, shallow, routeInfo, _routeInfo, error, hash;\n\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // If url and as provided as an object representation,\n                // we'll format them into the string version here.\n                url = (typeof _url === 'undefined' ? 'undefined' : (0, _typeof3.default)(_url)) === 'object' ? (0, _url2.format)(_url) : _url;\n                as = (typeof _as === 'undefined' ? 'undefined' : (0, _typeof3.default)(_as)) === 'object' ? (0, _url2.format)(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n                // \"<page>/index.html\" directly for the SSR page.\n\n                if (__NEXT_DATA__.nextExport) {\n                  as = (0, _._rewriteUrlForNextExport)(as);\n                }\n\n                this.abortComponentLoad(as);\n                _parse = (0, _url2.parse)(url, true), pathname = _parse.pathname, query = _parse.query; // If the url change is only related to a hash change\n                // We should not proceed. We should only change the state.\n\n                if (!this.onlyAHashChange(as)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                this.changeState(method, url, as);\n                this.scrollToHash(as);\n                return _context3.abrupt('return');\n\n              case 9:\n                // If asked to change the current URL we should reload the current page\n                // (not location.reload() but reload getInitalProps and other Next.js stuffs)\n                // We also need to set the method = replaceState always\n                // as this should not go into the history (That's how browsers work)\n                if (!this.urlIsNew(pathname, query)) {\n                  method = 'replaceState';\n                }\n\n                route = toRoute(pathname);\n                _options$shallow = options.shallow, shallow = _options$shallow === undefined ? false : _options$shallow;\n                routeInfo = null;\n                this.events.emit('routeChangeStart', as); // If shallow === false and other conditions met, we reuse the\n                // existing routeInfo for this route.\n                // Because of this, getInitialProps would not run.\n\n                if (!(shallow && this.isShallowRoutingPossible(route))) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                routeInfo = this.components[route];\n                _context3.next = 21;\n                break;\n\n              case 18:\n                _context3.next = 20;\n                return this.getRouteInfo(route, pathname, query, as);\n\n              case 20:\n                routeInfo = _context3.sent;\n\n              case 21:\n                _routeInfo = routeInfo, error = _routeInfo.error;\n\n                if (!(error && error.cancelled)) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                return _context3.abrupt('return', false);\n\n              case 24:\n                this.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                hash = window.location.hash.substring(1);\n                this.set(route, pathname, query, as, (0, _extends3.default)({}, routeInfo, {\n                  hash: hash\n                }));\n\n                if (!error) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                this.events.emit('routeChangeError', error, as);\n                throw error;\n\n              case 31:\n                this.events.emit('routeChangeComplete', as);\n                return _context3.abrupt('return', true);\n\n              case 33:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function change(_x8, _x9, _x10, _x11) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return change;\n    }()\n  }, {\n    key: 'changeState',\n    value: function changeState(method, url, as) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options\n        }, null, as);\n      }\n    }\n  }, {\n    key: 'getRouteInfo',\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee4(route, pathname, query, as) {\n        var routeInfo, _routeInfo2, Component, ctx, _Component, _ctx;\n\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                routeInfo = null;\n                _context4.prev = 1;\n                routeInfo = this.components[route];\n\n                if (routeInfo) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                _context4.next = 6;\n                return this.fetchComponent(route, as);\n\n              case 6:\n                _context4.t0 = _context4.sent;\n                routeInfo = {\n                  Component: _context4.t0\n                };\n\n              case 8:\n                _routeInfo2 = routeInfo, Component = _routeInfo2.Component;\n                ctx = {\n                  pathname: pathname,\n                  query: query,\n                  asPath: as\n                };\n                _context4.next = 12;\n                return this.getInitialProps(Component, ctx);\n\n              case 12:\n                routeInfo.props = _context4.sent;\n                this.components[route] = routeInfo;\n                _context4.next = 32;\n                break;\n\n              case 16:\n                _context4.prev = 16;\n                _context4.t1 = _context4['catch'](1);\n\n                if (!_context4.t1.cancelled) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                return _context4.abrupt('return', {\n                  error: _context4.t1\n                });\n\n              case 20:\n                if (!_context4.t1.buildIdMismatched) {\n                  _context4.next = 24;\n                  break;\n                } // Now we need to reload the page or do the action asked by the user\n\n\n                (0, _._notifyBuildIdMismatch)(as); // We also need to cancel this current route change.\n                // We do it like this.\n\n                _context4.t1.cancelled = true;\n                return _context4.abrupt('return', {\n                  error: _context4.t1\n                });\n\n              case 24:\n                if (_context4.t1.statusCode === 404) {\n                  // Indicate main error display logic to\n                  // ignore rendering this error as a runtime error.\n                  _context4.t1.ignore = true;\n                }\n\n                _Component = this.ErrorComponent;\n                routeInfo = {\n                  Component: _Component,\n                  err: _context4.t1\n                };\n                _ctx = {\n                  err: _context4.t1,\n                  pathname: pathname,\n                  query: query\n                };\n                _context4.next = 30;\n                return this.getInitialProps(_Component, _ctx);\n\n              case 30:\n                routeInfo.props = _context4.sent;\n                routeInfo.error = _context4.t1;\n\n              case 32:\n                return _context4.abrupt('return', routeInfo);\n\n              case 33:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 16]]);\n      }));\n\n      function getRouteInfo(_x13, _x14, _x15, _x16) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return getRouteInfo;\n    }()\n  }, {\n    key: 'set',\n    value: function set(route, pathname, query, as, data) {\n      this.route = route;\n      this.pathname = pathname;\n      this.query = query;\n      this.asPath = as;\n      this.notify(data);\n    }\n  }, {\n    key: 'onlyAHashChange',\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n\n      var _asPath$split = this.asPath.split('#'),\n          _asPath$split2 = (0, _slicedToArray3.default)(_asPath$split, 2),\n          oldUrlNoHash = _asPath$split2[0],\n          oldHash = _asPath$split2[1];\n\n      var _as$split = as.split('#'),\n          _as$split2 = (0, _slicedToArray3.default)(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // If the urls are change, there's more than a hash change\n\n\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      } // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n\n\n      return oldHash !== newHash;\n    }\n  }, {\n    key: 'scrollToHash',\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split('#'),\n          _as$split4 = (0, _slicedToArray3.default)(_as$split3, 2),\n          hash = _as$split4[1];\n\n      var el = document.getElementById(hash);\n\n      if (el) {\n        el.scrollIntoView();\n      }\n    }\n  }, {\n    key: 'urlIsNew',\n    value: function urlIsNew(pathname, query) {\n      return this.pathname !== pathname || !(0, _shallowEquals2.default)(query, this.query);\n    }\n  }, {\n    key: 'isShallowRoutingPossible',\n    value: function isShallowRoutingPossible(route) {\n      return (// If there's cached routeInfo for the route.\n        Boolean(this.components[route]) && // If the route is already rendered on the screen.\n        this.route === route\n      );\n    }\n  }, {\n    key: 'prefetch',\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee5(url) {\n        var _this = this;\n\n        var _parse2, pathname, route;\n\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(process.env.NODE_ENV === 'development')) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt('return');\n\n              case 2:\n                _parse2 = (0, _url2.parse)(url), pathname = _parse2.pathname;\n                route = toRoute(pathname);\n                return _context5.abrupt('return', this.prefetchQueue.add(function () {\n                  return _this.fetchRoute(route);\n                }));\n\n              case 5:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function prefetch(_x17) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return prefetch;\n    }()\n  }, {\n    key: 'fetchComponent',\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee6(route, as) {\n        var cancelled, cancel, Component, error;\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = this.componentLoadCancel = function () {\n                  cancelled = true;\n                };\n\n                _context6.prev = 2;\n                _context6.next = 5;\n                return this.fetchRoute(route);\n\n              case 5:\n                Component = _context6.sent;\n\n                if (!cancelled) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                error = new Error('Abort fetching component for route: \"' + route + '\"');\n                error.cancelled = true;\n                throw error;\n\n              case 10:\n                if (cancel === this.componentLoadCancel) {\n                  this.componentLoadCancel = null;\n                }\n\n                return _context6.abrupt('return', Component);\n\n              case 14:\n                _context6.prev = 14;\n                _context6.t0 = _context6['catch'](2); // There's an error in loading the route.\n                // Usually this happens when there's a failure in the webpack build\n                // So in that case, we need to load the page with full SSR\n                // That'll clean the invalid exising client side information.\n                // (Like cached routes)\n\n                window.location.href = as;\n                throw _context6.t0;\n\n              case 18:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[2, 14]]);\n      }));\n\n      function fetchComponent(_x18, _x19) {\n        return _ref7.apply(this, arguments);\n      }\n\n      return fetchComponent;\n    }()\n  }, {\n    key: 'getInitialProps',\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee7(Component, ctx) {\n        var cancelled, cancel, props, err;\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = function cancel() {\n                  cancelled = true;\n                };\n\n                this.componentLoadCancel = cancel;\n                _context7.next = 5;\n                return (0, _utils.loadGetInitialProps)(Component, ctx);\n\n              case 5:\n                props = _context7.sent;\n\n                if (cancel === this.componentLoadCancel) {\n                  this.componentLoadCancel = null;\n                }\n\n                if (!cancelled) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                err = new Error('Loading initial props cancelled');\n                err.cancelled = true;\n                throw err;\n\n              case 11:\n                return _context7.abrupt('return', props);\n\n              case 12:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getInitialProps(_x20, _x21) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }, {\n    key: 'fetchRoute',\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee8(route) {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.pageLoader.loadPage(route);\n\n              case 2:\n                return _context8.abrupt('return', _context8.sent);\n\n              case 3:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function fetchRoute(_x22) {\n        return _ref9.apply(this, arguments);\n      }\n\n      return fetchRoute;\n    }()\n  }, {\n    key: 'abortComponentLoad',\n    value: function abortComponentLoad(as) {\n      if (this.componentLoadCancel) {\n        this.events.emit('routeChangeError', new Error('Route Cancelled'), as);\n        this.componentLoadCancel();\n        this.componentLoadCancel = null;\n      }\n    }\n  }, {\n    key: 'notify',\n    value: function notify(data) {\n      this.subscriptions.forEach(function (fn) {\n        return fn(data);\n      });\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(fn) {\n      var _this2 = this;\n\n      this.subscriptions.add(fn);\n      return function () {\n        return _this2.subscriptions.delete(fn);\n      };\n    }\n  }]);\n  return Router;\n}();\n\nexports.default = Router;\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}","map":null,"metadata":{},"sourceType":"script"}