{"ast":null,"code":"import _regeneratorRuntime from \"/home/jason/jason_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jason/jason_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport web3 from './web3';\nimport Storage from '../abis/Storage.json';\nvar storage;\n\nfunction loadBlockchainData() {\n  return _loadBlockchainData.apply(this, arguments);\n}\n\nfunction _loadBlockchainData() {\n  _loadBlockchainData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var accounts, networkId, networkData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3.eth.getAccounts();\n\n          case 2:\n            accounts = _context.sent;\n            this.setState({\n              account: accounts[0]\n            });\n            _context.next = 6;\n            return web3.eth.net.getId();\n\n          case 6:\n            networkId = _context.sent;\n            networkData = Storage.networks[networkId];\n            console.log(networkData.address);\n\n            if (networkData) {\n              storage = new web3.eth.Contract(Storage.abi, networkData.address);\n              this.setState({\n                storage: storage\n              });\n            } else {\n              window.alert('Marketplace contract not deployed to detected network.');\n            }\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _loadBlockchainData.apply(this, arguments);\n}\n\nloadBlockchainData();\nexport default storage;","map":{"version":3,"sources":["/home/jason/jason_project/src/components/storage.js"],"names":["web3","Storage","storage","loadBlockchainData","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","console","log","address","Contract","abi","window","alert"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAGA,IAAIC,OAAJ;;SAEeC,kB;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE2BH,IAAI,CAACI,GAAL,CAASC,WAAT,EAF3B;;AAAA;AAEUC,YAAAA,QAFV;AAGI,iBAAKC,QAAL,CAAc;AAAEC,cAAAA,OAAO,EAAEF,QAAQ,CAAC,CAAD;AAAnB,aAAd;AAHJ;AAAA,mBAI4BN,IAAI,CAACI,GAAL,CAASK,GAAT,CAAaC,KAAb,EAJ5B;;AAAA;AAIUC,YAAAA,SAJV;AAKUC,YAAAA,WALV,GAKwBX,OAAO,CAACY,QAAR,CAAiBF,SAAjB,CALxB;AAMIG,YAAAA,OAAO,CAACC,GAAR,CAAYH,WAAW,CAACI,OAAxB;;AACA,gBAAGJ,WAAH,EAAgB;AACZV,cAAAA,OAAO,GAAE,IAAIF,IAAI,CAACI,GAAL,CAASa,QAAb,CAAsBhB,OAAO,CAACiB,GAA9B,EAAmCN,WAAW,CAACI,OAA/C,CAAT;AACF,mBAAKT,QAAL,CAAc;AAACL,gBAAAA,OAAO,EAAPA;AAAD,eAAd;AACD,aAHD,MAGO;AACLiB,cAAAA,MAAM,CAACC,KAAP,CAAa,wDAAb;AACD;;AAZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeAjB,kBAAkB;AAElB,eAAeD,OAAf","sourcesContent":["import web3 from './web3';\nimport Storage from '../abis/Storage.json';\n\n\nlet storage;\n\nasync function loadBlockchainData() {\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId()\n    const networkData = Storage.networks[networkId]\n    console.log(networkData.address)\n    if(networkData) {\n        storage =new web3.eth.Contract(Storage.abi, networkData.address)\n      this.setState({storage})\n    } else {\n      window.alert('Marketplace contract not deployed to detected network.')\n    }\n}\n\nloadBlockchainData();\n\nexport default storage;"]},"metadata":{},"sourceType":"module"}